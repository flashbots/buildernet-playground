#!/bin/sh
### BEGIN INIT INFO
# Provides:          debug-yolo
# Required-Start:	 $remote_fs $syslog $networking
# Required-Stop:	 $remote_fs $syslog 
# Default-Start:     2 3 4 5
# Default-Stop:      
# Short-Description: Ultra minimal debugging
### END INIT INFO

# Direct output to console
exec > /dev/console 2>&1

CONTINUE_FILE=/tmp/continue-boot

log() {
    echo "DEBUG-YOLO: $1"
}


create_auto_continue() {
    # Create a file that will automatically continue boot after timeout
    log "Setting up auto-continue timer (5 minutes)"
    (
        sleep 300  # 5 minutes
        log "Timeout reached - continuing boot process automatically"
        touch $CONTINUE_FILE
    ) &
}

start() {
    log "Starting ultra-minimal debug script..."
    
    # Create the timeout handler
    create_auto_continue
    
    # Wait for host services to be available
    echo "Waiting for host services to be ready..."
    while ! curl -s http://10.0.2.2:3500/eth/v1/node/identity > /dev/null; do
    sleep 5
    done

    # Get host peer IDs
    HOST_LIGHTHOUSE_PEER_ID=$(curl -s http://10.0.2.2:3500/eth/v1/node/identity | grep -o '"peer_id":"[^"]*' | cut -d'"' -f4)
    HOST_RETH_ENODE=$(curl -s -X POST -H "Content-Type: application/json" \
    --data '{"jsonrpc":"2.0","method":"admin_nodeInfo","params":[],"id":1}' \
    http://10.0.2.2:8545 | grep -o '"enode":"[^"]*' | cut -d'"' -f4 | sed 's/@.*/@10.0.2.2:30303/')

    # Update lighthouse init script
    sed -i "s|--trusted-peers.*|--trusted-peers \"$HOST_LIGHTHOUSE_PEER_ID\" \\\\|" /etc/init.d/lighthouse
    sed -i "s|--libp2p-addresses.*|--libp2p-addresses \"/ip4/10.0.2.2/tcp/9000/p2p/$HOST_LIGHTHOUSE_PEER_ID\" \\\\|" /etc/init.d/lighthouse

    # Update reth init script
    sed -i "s|--bootnodes.*|--bootnodes \"$HOST_RETH_ENODE\" \\\\|" /etc/init.d/reth
    sed -i "s|--trusted-peers enode:.*|--trusted-peers $HOST_RETH_ENODE \\\\|" /etc/init.d/reth

    echo "Peering information updated."

    # Wait for continue file
    log "========================================================"
    log "BOOT PROCESS PAUSED FOR DEBUG ACCESS"
    log ""
    log "SSH ACCESS: ssh -p 10022 root@localhost"
    log ""
    log "The system will continue booting when you create:"
    log "    $CONTINUE_FILE"
    log " or run the 'continue-boot' command"
    log ""
    log "Or after 5 minutes (automatic timeout)"
    log "========================================================"
    
    # Main wait loop
    while [ ! -f $CONTINUE_FILE ]; do
        sleep 5
        log "Waiting for $CONTINUE_FILE to be created..."
    done
    
    log "Continue file found! Resuming boot process..."
}

case "$1" in
    start)
        start
        ;;
    *)
        echo "Usage: $0 {start}" >&2
        exit 1
        ;;
esac

exit 0
