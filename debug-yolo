#!/bin/sh
### BEGIN INIT INFO
# Provides:          debug-yolo
# Required-Start:    $remote_fs $syslog $networking
# Required-Stop:     $remote_fs $syslog 
# Default-Start:     2 3 4 5
# Default-Stop:      
# Short-Description: Ultra minimal debugging
### END INIT INFO

# Direct output to console
exec > /dev/console 2>&1

CONTINUE_FILE=/tmp/continue-boot

log() {
    echo "DEBUG-YOLO: $1"
}

create_auto_continue() {
    # Create a file that will automatically continue boot after timeout
    log "Setting up auto-continue timer (5 minutes)"
    (
        sleep 300  # 5 minutes
        log "Timeout reached - continuing boot process automatically"
        touch $CONTINUE_FILE
    ) &
}

start() {
    log "Starting ultra-minimal debug script..."
    
    # Create the timeout handler
    create_auto_continue
    
    # Wait for host services to be available
    echo "Waiting for host services to be ready..."
    while ! curl -s http://10.0.2.2:3500/eth/v1/node/identity > /dev/null; do
        sleep 5
        echo "Still waiting for host Lighthouse..."
    done

    # Get host peer information with better error handling
    log "Fetching host Lighthouse identity..."
    HOST_LIGHTHOUSE_IDENTITY=$(curl -s http://10.0.2.2:3500/eth/v1/node/identity)
    if [ -z "$HOST_LIGHTHOUSE_IDENTITY" ]; then
        log "ERROR: Failed to get host identity data!"
        return 1
    fi
    
    HOST_LIGHTHOUSE_PEER_ID=$(echo "$HOST_LIGHTHOUSE_IDENTITY" | grep -o '"peer_id":"[^"]*' | cut -d'"' -f4)
    HOST_LIGHTHOUSE_ENR=$(echo "$HOST_LIGHTHOUSE_IDENTITY" | grep -o '"enr":"[^"]*' | cut -d'"' -f4)
    HOST_P2P_ADDR=$(echo "$HOST_LIGHTHOUSE_IDENTITY" | grep -o '"p2p_addresses":\["[^"]*' | cut -d'"' -f4)

    # Log what we found
    log "Host lighthouse peer ID: $HOST_LIGHTHOUSE_PEER_ID"
    log "Host lighthouse ENR found (first 30 chars): ${HOST_LIGHTHOUSE_ENR:0:30}..."

    # Get host Reth enode
    log "Fetching host Reth node info..."
    HOST_RETH_ENODE=$(curl -s -X POST -H "Content-Type: application/json" \
    --data '{"jsonrpc":"2.0","method":"admin_nodeInfo","params":[],"id":1}' \
    http://10.0.2.2:8545 | grep -o '"enode":"[^"]*' | cut -d'"' -f4 | sed 's/@.*/@10.0.2.2:30303/')

    log "Host Reth enode: $HOST_RETH_ENODE"

    # Update lighthouse init script
    log "Updating Lighthouse init script..."
    sed -i "s|--boot-nodes.*|--boot-nodes '${HOST_LIGHTHOUSE_ENR}' \\\\|" /etc/init.d/lighthouse
    sed -i "s|--trusted-peers.*|--trusted-peers \"${HOST_LIGHTHOUSE_PEER_ID}\" \\\\|" /etc/init.d/lighthouse
    sed -i "s|--libp2p-addresses.*|--libp2p-addresses \"${HOST_P2P_ADDR}\" \\\\|" /etc/init.d/lighthouse
    
    # Verify the changes
    log "Verifying Lighthouse script updates:"
    grep "boot-nodes" /etc/init.d/lighthouse
    grep "trusted-peers" /etc/init.d/lighthouse
    grep "libp2p-addresses" /etc/init.d/lighthouse

    # Update reth init script
    log "Updating Reth init script..."
    sed -i "s|--bootnodes.*|--bootnodes \"$HOST_RETH_ENODE\" \\\\|" /etc/init.d/reth
    sed -i "s|--trusted-peers enode:.*|--trusted-peers $HOST_RETH_ENODE \\\\|" /etc/init.d/reth

    # Verify the changes
    log "Verifying Reth script updates:"
    grep "bootnodes" /etc/init.d/reth
    grep "trusted-peers" /etc/init.d/reth

    # Wait for continue file
    log "========================================================"
    log "BOOT PROCESS PAUSED FOR DEBUG ACCESS"
    log ""
    log "SSH ACCESS: ssh -p 10022 root@localhost"
    log ""
    log "The system will continue booting when you create:"
    log "    $CONTINUE_FILE"
    log " or run the 'continue-boot' command"
    log ""
    log "Or after 5 minutes (automatic timeout)"
    log "========================================================"
    
    # Main wait loop
    while [ ! -f $CONTINUE_FILE ]; do
        sleep 5
        log "Waiting for $CONTINUE_FILE to be created..."
    done
    
    log "Continue file found! Resuming boot process..."
}

case "$1" in
    start)
        start
        ;;
    *)
        echo "Usage: $0 {start}" >&2
        exit 1
        ;;
esac

exit 0
